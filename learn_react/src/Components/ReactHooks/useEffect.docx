Cách dùng: Khi muốn thực hiện các side effects (nói tới 1 chương trình phần mềm khi có tác động xảy ra dẫn tới việc dữ liệu chương trình bị thay đổi)
     Vd: side effects:
        1.Updates DOM
        2.Call API
        3.Listen DOM events
          - Scroll
          - Resize
        4. Cleanup
          - Remove listener/ Unsubscribe
          - Clear timer
- Mỗi hook có 2 phần: side effects và clean up (optional)
- Đc thực thi sau mỗi lần render
- Đc thực thi ít nhất một lần sau lần render đầu tiên
- Những lần render sau, chỉ đc thực thi nếu có dependencies thay đổi
- Effect clean up sẽ được thực thi trược run effect lần tiếp theo hoặc unmount
Cú pháp: useEffect(callback,[dependence])
  callback: các hàm side effects
  denpendence: sự phụ thuộc về mặt dữ liệu
-----------------------------------------------------------------------------------------------------------------------------------------------------------
Vòng chạy:
MOUNTING:
- rendering
- run useEffect()
UPDATING:
- rendering
- run useEffect() cleanup nếu dependencies thay đổi
- run useEffect() nếu dependencies thay đổi
UNMOUNTING:
- run useEffect() cleanup 
----------------------------------------------------------------------------------------------------------------------------------------------------------- 
I. Callback luôn được gọi sau component mounted
II. Cleanup function luôn được gọi trước khi component unmouted
III. Cleanup function luôn đc gọi trước khi callbak được gọi (trừ lần mounted)
 1.  useEffect(callback)
 - Gọi callback mỗi khi component re-render
 - Gọi callback sau khi component thêm element vào DOM
 - clean up func sẽ được thực thi trước run effect lần tiếp theo hoặc unmount
 2.  useEffect(callback,[])
 - Chỉ gọi callback 1 lần sau khi component mounted
 - clean up func sẽ được thực thi khi unmount
 3.  useEffect(callback,[dependence])
 - Callback sẽ được gọi sau khi dependence thay đổi
 - clean up func sẽ được thực thi trước run effect lần tiếp theo hoặc unmount

------------------------------------------------------------------------------------------------------------------------------------------------------------
Code:
const tab=['posts','comments','albums']
export default function Content(){
     const [title, setTitle] = useState('');
     const [posts,setPosts] = useState([]);
     const [type,setType]= useState('posts')
     const [showGoToTop,setShowGoToTop]= useState(false);
     const [countDown, setCountDown]= useState(17890);
     const [count, setCount]= useState(1);
     
     console.log(type)
     //Updates DOM
     
     useEffect(()=>{
          console.log("Re-render",title)
          document.title=title;
     })
     // document.title=title; 
     //cũng được nhưng không làm như này vì khi làm như này thì lệnh này sẽ đc thực thi trước rồi mới render. Trường hợp câu lệnh phức tạp sẽ gây ra sự tắc nghẽn, trễ giao diện người dùng

     //Call API

     //fetch('https://jsonplaceholder.typicode.com/posts')
     // .then(res=>res.json())
     // .then(posts=>{
     //     console.log(posts);  
     //    setPosts(posts)
     // })//đoạn code ngoài sẽ re-render rất nhiều lần và sẽ gửi rất nhiều request gây đơ, lag trình duyệt
     useEffect(()=>{
       fetch('https://jsonplaceholder.typicode.com/posts')
        .then(res=>res.json())
        .then(posts=>{
          console.log(posts);  
          setPosts(posts)
      })
      },[])

     useEffect(()=>{
          console.log("Title Change")
        
     },[title])
     //title change đc in ra mỗi khi title thay đổi còn những thuộc tính khác thay đổi thì title change k đc in ra 

      useEffect(()=>{
       fetch('https://jsonplaceholder.typicode.com/${type}')
        .then(res=>res.json())
        .then(posts=>{
          console.log(posts);  
          setPosts(posts)
      })
      },[type])

      //Scroll
      useEffect(()=>{
        const handleScroll=()=>{
            console.log(window.scrollY)
            if (window.scrollY>=200){
                //Show
                setShowGoToTop(true)
            } else {
                //Hide
                setShowGoToTop(false)
            }
        }
       window.addEventListener("scroll",handleScroll)
       console.log("addEventListener")

       //Cleanup function
       return()=>{ 
        window.removeEventListener("scroll",handleScroll)
        console.log("removeEventListener")
       }
      })
      },[])
    //CountDown
    //c1
    useEffect(()=>{
     const timeID = setInterval(()=>{
        setCountDown(prevState=>prevState -1)
        console.log("countDown: ", countDown);
      },1000)
     return ()=> clearInterval(timeID)
      },[])
      //c2
      useEffect(()=>{
      setTimeout(()=>{
        setCountDown(countDown -1)
        console.log("countDown: ", countDown);
      },1000)      
      },[countDown])

      //Count
    useEffect(()=>{
     console.log("mounted or re-re-render lần ${count}");
     //cleanup func
     return ()=> {
        console.log("Cleanup lần ${count}")
     }
      },[count])
     return (
     <>
          <div>
            <input value={title} onChange={e=>{e.target.value}}/>
            <button type="submit">Toggle</button>
            {tabs.map(tab=>(
               <button key={tab} style={type === tab? {color:'#fff', backgroundColor:'#333'}} onClick={() => setType(tab)}>
               {tab}
               </button>

               ))}
          
          </div>
          {console.log("Render")}

          <ul>
           {posts.map(post =>{
               <li key={post.id}>{post.title||post.name}</li>
           })}
               
          </ul>
          {showGoToTop && {
            <button style={{
                position:'fixed',
                right: 20,
                bottom: 20
            }}>Go to Top</button>
          }}
           <h1>{countDown}</h1>
           <button onClick={()=>{setCount(count+1)}}>Click me!</button>
     </>
 )
}